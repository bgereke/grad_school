function [xp, xt, err, nt] = baysian(t,p,nall,fall,loc,dt);
% function [xp, xt, err, nt] = bayisan(t,p,nall,fall,loc,dt);
%
% Recontruct rats position using a Baysian method
% p = [time x y angle]
% nall = [bins x cells],     "place fields"
%                            # of spikes for cell j as location i
%                            generated by 'placefield.m'
% fall = [spk_time x cells], spike times of cell j.
%                            fall generated by 'cellfiring.m'  
% loc  = [bins],             probability of the rat being at 
%                            location i  
%                            generated by 'location.m'
% dt                         time-window, (~0.5 msec)

vmax = 150;  % cm/sec


bins = 150;
lgd  = 205; 


tmin = p(1,1);
tmax = p(length(p),1) - dt;     

if t < tmin | t > tmax
%     error(['t =' num2str(t) ' must be in the interval from '  num2str(tmin) ' to ' num2str(tmax)]) ; 
end

pos  = getpos(p,t); x  = pos(1); y  = pos(2); l  = getdist([x y]); 
b1 = round(l*bins/lgd); 

pos  = getpos(p,t+dt); x  = pos(1); y  = pos(2); l  = getdist([x y]); 
b2 = round(l*bins/lgd); 

if b2 < b1
    tmp = b2;
    b2  = b1;
    b1  = tmp; 
end

d1 = b2 - b1;
d2 = bins - d1;       

if d1 < d2
    b = b1 + d1/2;
else 
    b = b2 + d2/2  ; 
end 
if b > 150
    b = b - 150;
end


nt = getspikes(fall,t,dt); 

for i=1:bins                 
    fx = nall(i,:)'; 
    P(i) =  loc(i).*prod(fx.^nt)*exp(-dt*sum(fx));
end 
[dummy,xp] = max(P); 
xt         = b; 
if max(nt) == 0  
    xp = -1;
end

if xp > xt
    l1 = xp - xt;
    l2 = l1 - bins;
else
    l1 = bins - (xt - xp);
    l2 = l1 - bins; 
end
if abs(l1) < abs(l2)
    err = l1;
else 
    err = l2;
end

