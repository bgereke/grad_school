function [Trains] = inhom_poiss(rate,dt,method)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% function [Trains] = inhom_poiss(rate,dt,method) returns spike trains 
% generated by an inhomogenous Poisson process.
% rate - numtrials x T/dt matrix specifying the time varying rate function
% dt - bin widths of the rate function
% method - string specifying the method to be used (i.e. 'Bern' or 
%   'Rescale')
% Trains - numtrials x T/dt matrix of spike trains
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if strcmp(method,'Bern')
    
    %generate spike trains of length T
    Trains = binornd(ones(size(rate)),dt*rate);
    
elseif strcmp(method,'Rescale')
    
    Trains = zeros(size(rate));
    
    %draw spike counts
    T = dt*size(rate,2);
    mean_rate = mean(rate,2);
    mean_counts = T*mean_rate; 
    counts = round(mean_counts + sqrt(mean_counts).*randn(size(rate,1),1));
    
    %generate spike times and rescale
    rate_cdf = cumsum(dt*rate,2);
    for i=1:size(rate,1)
        times = round(rate_cdf(i,end))*rand(1,counts(i));
        for j = 1:counts(i)
            [y, times(j)] = min((rate_cdf(i,:)-times(j)).^2);         
        end  
        Trains(i,times) = 1;
    end    
end