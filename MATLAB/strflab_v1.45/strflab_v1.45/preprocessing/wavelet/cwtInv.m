function [im]=cwtInv(cf)
%ffunction [im]=cwtInv(cf)
%
% Compute the inverse CWT from the Dual Tree CWT coefficient  
% using Anotonini Biorthogonal wavelet, and qshift_c = 16,16
% tap filters. 
% If no output arguments are specified, it will display the 
% reconstructed images.
%
% INPUT:
%   [cf] = CWT coeffs in sub-image structure. cell array of 
%          struct of coeffs at each scale level. Orientation 
%          of each level is stored as a structure. So that 
%            [cfStr{N}.p15] = Nth scale level at +15 deg.
%            [cfStr{M}.n45] = Mth scale level at -45 deg.
%          The highest level is the low pass level and has
%          no orientation structure.
%            [cfStr{end}] = low pass filter level. 
% OUTPUT:
%   [im] = 2-D array of pixel values.
%
% SEE ALSO: cwtDT, cwtStr2qcf, cwtShowStr
%
% By Michael Wu  --  waftingpetal@yahoo.com (Mar 2007)
%
% ====================


% Init Antonini & qShiftC filters
%--------------------
antonini.g0o=[-0.0456358815571251;  -0.0287717631142493;    0.295635881557128; ...
               0.557543526228502;    0.295635881557123;    -0.0287717631142531; ...
              -0.0456358815571261];
antonini.g1o=[ 0.0267487574108101;   0.0168641184428747;   -0.0782232665289905; ...
              -0.266864118442873;    0.602949018236359;    -0.266864118442877; ...
              -0.0782232665289884;   0.0168641184428753;    0.0267487574108096];
antonini.h0o=[ 0.0267487574108101;  -0.0168641184428747;   -0.0782232665289905; ...
               0.266864118442873;    0.602949018236359;     0.266864118442877; ...
              -0.0782232665289884;  -0.0168641184428753;    0.0267487574108096];
antonini.h1o=[ 0.0456358815571251;  -0.0287717631142493;   -0.295635881557128; ...
               0.557543526228502;   -0.295635881557123;    -0.0287717631142531; ...
               0.0456358815571261];
qshift_c.g0a=[ 0.00243034994514868; -0.000227652205897772; -0.00720267787825835; ...
               0.0184986827241562;   0.0222892632669227;   -0.112558884257522; ...
               0.0146374059644733;   0.567134484100133;     0.756393765199037; ...
               0.276368643133032;   -0.115911457427441;    -0.037273895799898; ...
               0.0349146123068422;  -7.14419732796501e-05; -0.000446022789262285; ...
              -0.00476161193845591];
qshift_c.g0b=[-0.00476161193845591; -0.000446022789262285; -7.14419732796501e-05; ...
               0.0349146123068422;  -0.037273895799898;    -0.115911457427441; ...
               0.276368643133032;    0.756393765199037;     0.567134484100133; ...
               0.0146374059644733;  -0.112558884257522;     0.0222892632669227; ...
               0.0184986827241562;  -0.00720267787825835;  -0.000227652205897772; ...
               0.00243034994514868];
qshift_c.g1a=[ 0.00476161193845591; -0.000446022789262285;  7.14419732796501e-05; ...
               0.0349146123068422;   0.037273895799898;    -0.115911457427441; ...
              -0.276368643133032;    0.756393765199037;    -0.567134484100133; ...
               0.0146374059644733;   0.112558884257522;     0.0222892632669227; ...
              -0.0184986827241562;  -0.00720267787825835;   0.000227652205897772; ...
               0.00243034994514868];
qshift_c.g1b=[ 0.00243034994514868;  0.000227652205897772; -0.00720267787825835; ...
              -0.0184986827241562;   0.0222892632669227;    0.112558884257522; ...
               0.0146374059644733;  -0.567134484100133;     0.756393765199037; ...
              -0.276368643133032;   -0.115911457427441;     0.037273895799898; ...
               0.0349146123068422;   7.14419732796501e-05; -0.000446022789262285; ...
               0.00476161193845591];
qshift_c.h0a=[-0.00476161193845591; -0.000446022789262285; -7.14419732796501e-05; ...
               0.0349146123068422;  -0.037273895799898;    -0.115911457427441; ...
               0.276368643133032;    0.756393765199037;     0.567134484100133; ...
               0.0146374059644733;  -0.112558884257522;     0.0222892632669227; ...
               0.0184986827241562;  -0.00720267787825835;  -0.000227652205897772; ...
               0.00243034994514868];
qshift_c.h0b=[ 0.00243034994514868; -0.000227652205897772; -0.00720267787825835; ...
               0.0184986827241562;   0.0222892632669227;   -0.112558884257522; ...
               0.0146374059644733;   0.567134484100133;     0.756393765199037; ...
               0.276368643133032;   -0.115911457427441;    -0.037273895799898; ...
               0.0349146123068422;  -7.14419732796501e-05; -0.000446022789262285; ...
              -0.00476161193845591];
qshift_c.h1a=[ 0.00243034994514868;  0.000227652205897772; -0.00720267787825835; ...
              -0.0184986827241562;   0.0222892632669227;    0.112558884257522; ...
               0.0146374059644733;  -0.567134484100133;     0.756393765199037; ...
              -0.276368643133032;   -0.115911457427441;     0.037273895799898; ...
               0.0349146123068422;   7.14419732796501e-05; -0.000446022789262285; ...
               0.00476161193845591];
qshift_c.h1b=[ 0.00476161193845591; -0.000446022789262285;  7.14419732796501e-05; ...
               0.0349146123068422;   0.037273895799898;    -0.115911457427441; ...
              -0.276368643133032;    0.756393765199037;    -0.567134484100133; ...
               0.0146374059644733;   0.112558884257522;     0.0222892632669227; ...
              -0.0184986827241562;  -0.00720267787825835;   0.000227652205897772; ...
               0.00243034994514868];


% Convert to Dual Tree Coeff Vector
%--------------------
[cwtc]=cwtStr2qcf(cf);


% Compute Inverse Dual Tree complex wavelet transform
%--------------------
im=dtwaverec2mw(cwtc.coef,cwtc.siz,antonini,qshift_c);


% Display Reconstructed Image
%--------------------
if nargout<1
  imagesc(im);
  colormap gray;
  axis off; axis image;
end

